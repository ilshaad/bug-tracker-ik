# This is a basic workflow to help you get started with Actions
name: connect bug-tracker docker-compose.yml to heroku frontend & backend app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
      - develop
#   pull_request:
#     branches: [ master ]

# Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo iK Hello, world! BUG TRACKER echoing!!!

      # Create .env file & insert env variables from github secrets for the frontend
      - name: Create .env file & insert github secrets as env variables within for the frontend to use as .env
        run: |
          touch .env
          echo DOMAIN_AUTH0=${{ secrets.DOMAIN_AUTH0 }} >> .env
          echo CLIENT_ID_AUTH0=${{ secrets.CLIENT_ID_AUTH0 }} >> .env
          echo BACKEND_URL=${{ secrets.BACKEND_URL }} >> .env
          echo ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }} >> .env
          ls -la
          mv .env frontend
          ls -la frontend

      # Build Docker images
      - name: Build Docker images
        run: docker compose -f docker-compose.yml build

      # Login to Heroku Container Registry
      - name: Login to Heroku Container Registry
        run: echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=_ --password-stdin registry.heroku.com

      # Tag and Push Frontend Image
      - name: Tag and Push Frontend Image
        run: |
          docker tag bug-tracker-ik_bugtrackerfrontend registry.heroku.com/bug-tracker-frontend-ik-202203/web
          docker push registry.heroku.com/bug-tracker-frontend-ik-202203/web

      # Tag and Push Backend Image
      - name: Tag and Push Backend Image
        run: |
          docker tag bug-tracker-ik_bugtrackerbackend registry.heroku.com/bug-tracker-backend-ik-202203/web
          docker push registry.heroku.com/bug-tracker-backend-ik-202203/web

      # Release Frontend
      - name: Release Frontend
        run: |
          curl -n -X POST https://api.heroku.com/apps/bug-tracker-frontend-ik-202203/releases \
            -d '{}' \
            -H "Content-Type:application/json" \
            -H "Accept: application/vnd.heroku+json; version=3.docker-releases" \
            -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}"

      # Release Backend
      - name: Release Backend
        run: |
          curl -n -X POST https://api.heroku.com/apps/bug-tracker-backend-ik-202203/releases \
            -d '{}' \
            -H "Content-Type:application/json" \
            -H "Accept: application/vnd.heroku+json; version=3.docker-releases" \
            -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}"
# This is a basic workflow to help you get started with Actions
name: connect bug-tracker docker-compose.yml to heroku frontend & backend app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
      - develop
#   pull_request:
#     branches: [ master ]

# Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo iK Hello, world! BUG TRACKER echoing!!!

      # Create .env file & insert env variables from github secrets for the frontend
      - name: Create .env file & insert github secrets as env variables within for the frontend to use as .env
        run: |
          touch .env
          echo DOMAIN_AUTH0=${{ secrets.DOMAIN_AUTH0 }} >> .env
          echo CLIENT_ID_AUTH0=${{ secrets.CLIENT_ID_AUTH0 }} >> .env
          echo BACKEND_URL=${{ secrets.BACKEND_URL }} >> .env
          echo ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }} >> .env
          ls -la
          mv .env frontend
          ls -la frontend

      - name: Deploy Multiple Docker Images to Heroku Apps
        uses: snithyanantham/docker-compose-multiple-apps-heroku-deploy@v1.0 # use the latest version of the action
        id: heroku
        with:
          email: ${{ secrets.HEROKU_EMAIL }} # your heroku email
          api_key: ${{ secrets.HEROKU_API_KEY }} # your  heroku api key
          docker_compose_file: "./docker-compose.yml" # set the path to the folder where the docker-compose file is located
          heroku_apps: '[{"imagename":"bug-tracker-ik_bugtrackerfrontend","appname":"bug-tracker-frontend-ik-202203","apptype":"web"},{"imagename":"bug-tracker-ik_bugtrackerbackend","appname":"bug-tracker-backend-ik-202203","apptype":"web"}]' # List of Docker Image name, Heroku app and Heroku app type
